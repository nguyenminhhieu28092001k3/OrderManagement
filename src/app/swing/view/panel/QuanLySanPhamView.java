/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package app.swing.view.panel;

import app.swing.controller.SanPhamController;
import app.swing.controller.BaseSearchController;
import app.swing.model.SanPham;
import app.swing.view.dialog.AddProductDialog;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author khaim
 */
public class QuanLySanPhamView extends javax.swing.JPanel {
    
    private SanPhamController sanPhamController;
    private DefaultTableModel tableModel;
    
    // Pagination variables
    private int currentPage = 0;
    private int pageSize = 10;
    private int totalPages = 0;
    private String currentSearchKeyword = "";
    private List<SanPham> currentPageProducts = new ArrayList<>();
    
    /**
     * Creates new form QuanLySanPham
     */
    public QuanLySanPhamView() {
        initComponents();
        sanPhamController = new SanPhamController();
        setupTable();
        loadSanPhamData();
        setupPaginationButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSPham = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        txtKeyword = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        lblTongSo = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        tblSPham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "STT", "Tên", "Ngày tạo", "Giá", "Chi tiết"
            }
        ));
        tblSPham.setShowGrid(true);
        jScrollPane1.setViewportView(tblSPham);

        btnAdd.setText("Thêm mới");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtKeyword.setText("Nhập vào tên tìm kiếm");

        btnSearch.setText("Tìm kiếm");

        btnPrev.setText("Trước");

        btnLast.setText("Sau");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        lblTongSo.setText("Tổng số");

        btnUpdate.setText("Cập nhật");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDelete))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(35, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPrev)
                        .addGap(34, 34, 34)
                        .addComponent(btnLast)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTongSo)
                        .addGap(46, 46, 46))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtKeyword, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrev)
                    .addComponent(btnLast)
                    .addComponent(lblTongSo))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        AddProductDialog dialog = new AddProductDialog();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        if (dialog.isSucceeded()) {
            SanPham newProduct = dialog.getSanPham();
            try {
                sanPhamController.addNewProduct(newProduct);
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Thêm sản phẩm thành công!",
                        "Thông báo",
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                refreshData();
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Lỗi khi thêm sản phẩm: " + e.getMessage(),
                        "Lỗi",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // This will be handled by setupPaginationButtons()
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            int selectedRow = tblSPham.getSelectedRow();
            if (selectedRow < 0) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Vui lòng chọn sản phẩm cần cập nhật.",
                        "Thông báo",
                        javax.swing.JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Get selected product details
            SanPham selectedProduct = currentPageProducts.get(selectedRow);

            // Set the fields for update
            String tenSanPham = String.valueOf(tblSPham.getValueAt(selectedRow, 1));
            double giaSanPham = Double.parseDouble(String.valueOf(tblSPham.getValueAt(selectedRow, 3)).replace(",", "").replace(" VNĐ", ""));
            String moTaSanPham = String.valueOf(tblSPham.getValueAt(selectedRow, 4));
            // TODO: Temporarily hardcoded
            String nguoiCapNhat = "khangho";
            LocalDateTime ngayCapNhat = LocalDateTime.now();

            // Create a new SanPham object with updated values
            selectedProduct.setTen(tenSanPham);
            selectedProduct.setGia(giaSanPham);
            selectedProduct.setMota(moTaSanPham);
            selectedProduct.setNguoiCapNhat(nguoiCapNhat);
            selectedProduct.setNgayCapNhat(ngayCapNhat);

            // Call controller to update product
            boolean isUpdated = sanPhamController.updateProduct(selectedProduct);
            if (isUpdated) {
                javax.swing.JOptionPane.showMessageDialog(this,
                    "Cập nhật sản phẩm thành công!",
                    "Thông báo",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
                refreshData(); // Refresh dữ liệu sau khi cập nhật
            } else {
                javax.swing.JOptionPane.showMessageDialog(this,
                    "Cập nhật sản phẩm thất bại. Vui lòng thử lại.",
                    "Lỗi",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Giá sản phẩm không hợp lệ. Vui lòng nhập lại.",
                "Lỗi",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                "Lỗi khi cập nhật sản phẩm: " + e.getMessage(),
                "Lỗi",
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            int selectedRow = tblSPham.getSelectedRow();
            if (selectedRow < 0) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Vui lòng chọn sản phẩm cần xóa.",
                        "Thông báo",
                        javax.swing.JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Get selected product details
            SanPham selectedProduct = currentPageProducts.get(selectedRow);
            int id = selectedProduct.getId();
            String tenSanPham = selectedProduct.getTen();

            // Set the fields for deletion
            // TODO: Temporarily hardcoded
            String nguoiXoa = "khangho";
            LocalDateTime ngayXoa = LocalDateTime.now();

            // Set value for SanPham object
            SanPham sanPham = new SanPham();
            sanPham.setId(id);
            sanPham.setNguoiXoa(nguoiXoa);
            sanPham.setNgayXoa(ngayXoa);

            int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                    "Bạn có chắc chắn muốn xóa sản phẩm '" + tenSanPham + "'?",
                    "Xác nhận xóa",
                    javax.swing.JOptionPane.YES_NO_OPTION);
            if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                try {
                    // Gọi controller để xóa sản phẩm
                    sanPhamController.deleteProduct(sanPham);
                    javax.swing.JOptionPane.showMessageDialog(this,
                            "Xóa sản phẩm thành công!",
                            "Thông báo",
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    refreshData(); // Refresh dữ liệu sau khi xóa
                } catch (Exception e) {
                    javax.swing.JOptionPane.showMessageDialog(this,
                            "Lỗi khi xóa sản phẩm: " + e.getMessage(),
                            "Lỗi",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Lỗi khi xóa sản phẩm: " + e.getMessage(),
                    "Lỗi",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void setupTable() {
        tableModel = (DefaultTableModel) tblSPham.getModel();
        tableModel.setRowCount(0);

        String[] columnNames = {"STT", "Tên", "Ngày tạo", "Giá", "Chi tiết"};
        tableModel.setColumnIdentifiers(columnNames);
    }
    
    /**
     * Load dữ liệu sản phẩm với phân trang
     */
    private void loadSanPhamData() {
        loadSanPhamData(currentPage, currentSearchKeyword);
    }
    
    /**
     * Load dữ liệu sản phẩm với phân trang và tìm kiếm
     * @param page Trang hiện tại
     * @param keyword Từ khóa tìm kiếm (null hoặc empty = load tất cả)
     */
    private void loadSanPhamData(int page, String keyword) {
        try {
            BaseSearchController.PageResult<SanPham> pageResult;
            
            if (keyword != null && !keyword.trim().isEmpty() && !keyword.equals("Nhập vào tên tìm kiếm")) {
                // Tìm kiếm với phân trang
                pageResult = sanPhamController.searchSanPhamByName(keyword.trim(), page, pageSize);
            } else {
                // Load tất cả với phân trang
                pageResult = sanPhamController.getPageResult(page, pageSize);
            }
            
            // Clear existing data
            tableModel.setRowCount(0);
            currentPageProducts.clear();
            
            if (pageResult != null && pageResult.getData() != null) {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
                List<SanPham> dsSanPham = pageResult.getData();

                // Store the products for this page
                currentPageProducts.addAll(dsSanPham);

                // Update pagination info
                currentPage = pageResult.getCurrentPage();
                totalPages = pageResult.getTotalPages();
                
                // Add data to table
                for (int i = 0; i < dsSanPham.size(); i++) {
                    SanPham sp = dsSanPham.get(i);
                    Object[] row = {
                        (currentPage * pageSize) + i + 1, // STT theo trang
                        sp.getTen(),
                        sp.getNgayTao() != null ? sp.getNgayTao().format(formatter) : "",
                        String.format("%,.0f VNĐ", sp.getGia()),
                        sp.getMota() != null ? (sp.getMota().length() > 50 ? 
                            sp.getMota().substring(0, 50) + "..." : sp.getMota()) : ""
                    };
                    tableModel.addRow(row);
                }

                // Update pagination buttons
                updatePaginationButtons();
                updatePaginationInfo(pageResult);
            }
            
        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Lỗi khi tải dữ liệu sản phẩm: " + e.getMessage(), 
                "Lỗi", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Setup các button phân trang
     */
    private void setupPaginationButtons() {
        // Button Previous
        btnPrev.setText("« Trước");
        btnPrev.addActionListener(e -> {
            if (currentPage > 0) {
                loadSanPhamData(currentPage - 1, currentSearchKeyword);
            }
        });
        
        // Button Next (update jButton1 to btnNext)
        btnLast.setText("Tiếp »");
        btnLast.addActionListener(e -> {
            if (currentPage < totalPages - 1) {
                loadSanPhamData(currentPage + 1, currentSearchKeyword);
            }
        });
        
        // Button Search
        btnSearch.addActionListener(e -> {
            currentSearchKeyword = txtKeyword.getText().trim();
            currentPage = 0; // Reset về trang đầu khi search
            loadSanPhamData(0, currentSearchKeyword);
        });
        
        // Enter key trong search box
        txtKeyword.addActionListener(e -> btnSearch.doClick());
        
        // Clear placeholder text khi focus
        txtKeyword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (txtKeyword.getText().equals("Nhập vào tên tìm kiếm")) {
                    txtKeyword.setText("");
                }
            }
            
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (txtKeyword.getText().trim().isEmpty()) {
                    txtKeyword.setText("Nhập vào tên tìm kiếm");
                }
            }
        });
    }
    
    /**
     * Cập nhật trạng thái các button phân trang
     */
    private void updatePaginationButtons() {
        btnPrev.setEnabled(currentPage > 0);
        btnLast.setEnabled(currentPage < totalPages - 1);
    }
    
    /**
     * Cập nhật thông tin phân trang
     */
    private void updatePaginationInfo(BaseSearchController.PageResult<SanPham> pageResult) {
        // Có thể thêm JLabel để hiển thị thông tin phân trang
        String info = String.format("Trang %d/%d - Tổng: %d sản phẩm", 
            currentPage + 1, totalPages, pageResult.getTotalRecords());
        
        // Update title của panel hoặc tooltip
        this.setToolTipText(info);
        
        // Hoặc có thể thêm JLabel vào form để hiển thị thông tin này
        lblTongSo.setText(info);
    }
    
    /**
     * Refresh dữ liệu (giữ nguyên trang hiện tại)
     */
    public void refreshData() {
        loadSanPhamData(currentPage, currentSearchKeyword);
    }
    
    /**
     * Reset về trang đầu
     */
    public void resetToFirstPage() {
        currentPage = 0;
        currentSearchKeyword = "";
        txtKeyword.setText("Nhập vào tên tìm kiếm");
        loadSanPhamData();
    }
    
    /**
     * Thay đổi kích thước trang
     */
    public void setPageSize(int newPageSize) {
        this.pageSize = newPageSize;
        currentPage = 0; // Reset về trang đầu
        loadSanPhamData();
    }
    
    /**
     * Lấy thông tin phân trang hiện tại
     */
    public String getPaginationInfo() {
        return String.format("Trang %d/%d", currentPage + 1, totalPages);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTongSo;
    public javax.swing.JTable tblSPham;
    private javax.swing.JTextField txtKeyword;
    // End of variables declaration//GEN-END:variables
}
